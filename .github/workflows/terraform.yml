# GitHub Actions workflow for Terraform integration with Azure
# Automatically deploys the Python microservice to Kubernetes on any branch push.

name: Terraform integration

on:
  workflow_dispatch:  # Allows manual deployment from GitHub Actions UI.

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout repository
      - name: Check out repository
        uses: actions/checkout@v3

      # Azure login using Service Principal credentials from GitHub Secrets
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # List Azure resource groups as a test
      - name: List Azure Resource Groups
        run: az group list

      # Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      # Terraform initialization
      - name: Terraform Init
        run: terraform init
        working-directory: scripts/terraform

      # Terraform plan
      - name: Terraform Plan
        run: terraform plan
        working-directory: scripts/terraform
        continue-on-error: true

      # Apply Terraform changes only on the main branch
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve
        working-directory: scripts/terraform
        continue-on-error: true

      # Upload Terraform state file
      - name: Upload Terraform state file
        uses: actions/upload-artifact@v3
        with:
          name: terraform-state-file
          path: ./scripts/terraform/terraform.tfstate

      # Install dependencies for GitHub CLI and jq
      - name: Install dependencies
        run: |
          sudo apt install gh -y
          sudo apt install jq -y

      # GitHub CLI login using token
      - name: GitHub-CLI Login
        run: echo "${{ secrets.TOKEN }}" | gh auth login --with-token

      # Refresh Terraform state
      - name: Refresh Terraform state
        run: terraform refresh

      # Set Azure Container Registry, registry username, and Kubernetes config
      - name: Set Secrets
        run: |
          azure_container_registry_name=$(az acr list | jq -r '.[0].loginServer')
          gh secret set CONTAINER_REGISTRY --body "$azure_container_registry_name"

          az acr credential show --name "$azure_container_registry_name" --query "{username:username, passwords:passwords[0].value}" --output json > credentials.json
          gh secret set REGISTRY_UN --body "$(cat credentials.json | jq -r '.username')"
          gh secret set REGISTRY_PW --body "$(cat credentials.json | jq -r '.passwords')"

          az aks get-credentials --resource-group ${{ vars.AZURE_RESOURCE_NAME }} --name ${{ vars.APP_NAME }}  
          gh secret set KUBE_CONFIG --body "$(cat ~/.kube/config | base64 -w 0)"
